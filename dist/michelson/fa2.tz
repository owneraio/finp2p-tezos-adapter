{ parameter
    (or (or (or %admin (bool %pause) (address %update_auth_contract))
            (or %assets
               (or (pair %balance_of
                      (list %requests (pair (address %owner) (nat %token_id)))
                      (contract %callback
                         (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                   (list %transfer
                      (pair (address %from_)
                            (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))))
               (or (list %update_operators
                      (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                          (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))))
                   (list %update_operators_for_all
                      (or (address %add_operator_for_all) (address %remove_operator_for_all))))))
        (or %manager
           (pair %burn (nat %token_id) (list %owners (pair address nat)))
           (pair %mint
              (nat %token_id)
              (pair (map %token_info string bytes) (list %owners (pair address nat)))))) ;
  storage
    (pair (pair (pair (pair (address %auth_contract) (big_map %ledger (pair nat address) nat))
                      (pair (big_map %metadata string bytes) (nat %next_token_id)))
                (pair (pair (big_map %operators (pair address (pair address nat)) unit)
                            (big_map %operators_for_all (pair address address) unit))
                      (pair (bool %paused) (option %pending_admin address))))
          (big_map %token_metadata nat (pair nat (map string bytes)))) ;
  code { PUSH string "FA2_INSUFFICIENT_BALANCE" ;
         SWAP ;
         UNPAIR ;
         DUP ;
         IF_LEFT
           { IF_LEFT
               { DIG 3 ;
                 DROP ;
                 DIG 2 ;
                 SWAP ;
                 IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CDR ;
                     DIG 2 ;
                     PAIR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     DUP 4 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DIG 4 ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PAIR } ;
                 NIL operation ;
                 PAIR }
               { DUP 3 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 IF { PUSH string "PAUSED" ; FAILWITH } {} ;
                 DIG 2 ;
                 SWAP ;
                 IF_LEFT
                   { IF_LEFT
                       { DIG 3 ;
                         DROP ;
                         DUP ;
                         CAR ;
                         MAP { DUP 3 ;
                               CAR ;
                               CAR ;
                               CAR ;
                               CDR ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               CAR ;
                               DUP 3 ;
                               CDR ;
                               PAIR ;
                               GET ;
                               IF_NONE
                                 { DROP ; PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH }
                                 { SWAP ; PAIR } } ;
                         SWAP ;
                         CDR ;
                         PUSH mutez 0 ;
                         DIG 2 ;
                         TRANSFER_TOKENS ;
                         SWAP ;
                         NIL operation ;
                         DIG 2 ;
                         CONS ;
                         PAIR }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CAR ;
                         CAR ;
                         CDR ;
                         SWAP ;
                         ITER { DUP ;
                                DUG 2 ;
                                CDR ;
                                ITER { SWAP ;
                                       DUP ;
                                       DUP 4 ;
                                       CAR ;
                                       DUP 4 ;
                                       GET 3 ;
                                       PAIR ;
                                       GET ;
                                       IF_NONE
                                         { DROP 2 ; DUP 4 ; FAILWITH }
                                         { PUSH nat 0 ;
                                           DUP 4 ;
                                           GET 4 ;
                                           COMPARE ;
                                           EQ ;
                                           IF { DIG 2 ; DROP 2 }
                                              { DUP 3 ;
                                                GET 4 ;
                                                SWAP ;
                                                SUB ;
                                                ISNAT ;
                                                IF_NONE
                                                  { DROP 2 ; DUP 4 ; FAILWITH }
                                                  { DUP 5 ;
                                                    DUP 4 ;
                                                    GET 3 ;
                                                    SENDER ;
                                                    DUP 7 ;
                                                    CAR ;
                                                    LAMBDA
                                                      (pair address address)
                                                      (lambda
                                                         nat
                                                         (lambda
                                                            (pair (pair (pair (pair address (big_map (pair nat address) nat)) (pair (big_map string bytes) nat))
                                                                        (pair (pair (big_map (pair address (pair address nat)) unit)
                                                                                    (big_map (pair address address) unit))
                                                                              (pair bool (option address))))
                                                                  (big_map nat (pair nat (map string bytes))))
                                                            unit))
                                                      { UNPAIR ;
                                                        SWAP ;
                                                        PAIR ;
                                                        LAMBDA
                                                          (pair (pair address address) nat)
                                                          (lambda
                                                             (pair (pair (pair (pair address (big_map (pair nat address) nat)) (pair (big_map string bytes) nat))
                                                                         (pair (pair (big_map (pair address (pair address nat)) unit)
                                                                                     (big_map (pair address address) unit))
                                                                               (pair bool (option address))))
                                                                   (big_map nat (pair nat (map string bytes))))
                                                             unit)
                                                          { UNPAIR ;
                                                            UNPAIR ;
                                                            DIG 2 ;
                                                            PAIR 3 ;
                                                            LAMBDA
                                                              (pair (pair nat (pair address address))
                                                                    (pair (pair (pair (pair address (big_map (pair nat address) nat)) (pair (big_map string bytes) nat))
                                                                                (pair (pair (big_map (pair address (pair address nat)) unit)
                                                                                            (big_map (pair address address) unit))
                                                                                      (pair bool (option address))))
                                                                          (big_map nat (pair nat (map string bytes)))))
                                                              unit
                                                              { UNPAIR ;
                                                                UNPAIR 3 ;
                                                                DIG 3 ;
                                                                DUP 3 ;
                                                                DUP 5 ;
                                                                COMPARE ;
                                                                EQ ;
                                                                IF { DROP 4 ; UNIT }
                                                                   { DUP ;
                                                                     CAR ;
                                                                     CDR ;
                                                                     CAR ;
                                                                     CDR ;
                                                                     DUP 4 ;
                                                                     DUP 6 ;
                                                                     PAIR ;
                                                                     MEM ;
                                                                     IF { DROP 4 ; UNIT }
                                                                        { CAR ;
                                                                          CDR ;
                                                                          CAR ;
                                                                          CAR ;
                                                                          SWAP ;
                                                                          DIG 2 ;
                                                                          PAIR ;
                                                                          DIG 2 ;
                                                                          PAIR ;
                                                                          MEM ;
                                                                          IF { UNIT } { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } } } ;
                                                            SWAP ;
                                                            APPLY } ;
                                                        SWAP ;
                                                        APPLY } ;
                                                    SWAP ;
                                                    APPLY ;
                                                    SWAP ;
                                                    EXEC ;
                                                    SWAP ;
                                                    EXEC ;
                                                    SWAP ;
                                                    EXEC ;
                                                    DROP ;
                                                    PUSH nat 0 ;
                                                    SWAP ;
                                                    DUP ;
                                                    DUG 2 ;
                                                    COMPARE ;
                                                    EQ ;
                                                    IF { DROP ; DUP 3 ; CAR ; DUP 3 ; GET 3 ; PAIR ; NONE nat ; SWAP ; UPDATE }
                                                       { SOME ; DUP 4 ; CAR ; DUP 4 ; GET 3 ; PAIR ; UPDATE } ;
                                                    DUP ;
                                                    DUP 3 ;
                                                    CAR ;
                                                    DUP 4 ;
                                                    GET 3 ;
                                                    PAIR ;
                                                    GET ;
                                                    IF_NONE
                                                      { SWAP ;
                                                        DUP ;
                                                        DUG 2 ;
                                                        GET 4 ;
                                                        DUP 3 ;
                                                        CAR ;
                                                        DIG 3 ;
                                                        GET 3 ;
                                                        PAIR ;
                                                        SWAP ;
                                                        SOME ;
                                                        SWAP ;
                                                        UPDATE }
                                                      { SWAP ;
                                                        DUP 3 ;
                                                        GET 4 ;
                                                        DIG 2 ;
                                                        ADD ;
                                                        SOME ;
                                                        DUP 3 ;
                                                        CAR ;
                                                        DIG 3 ;
                                                        GET 3 ;
                                                        PAIR ;
                                                        UPDATE } } } } } ;
                                SWAP ;
                                DROP } ;
                         DIG 3 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP 3 ;
                         CAR ;
                         CDR ;
                         DUP 4 ;
                         CAR ;
                         CAR ;
                         CDR ;
                         DIG 3 ;
                         DIG 4 ;
                         CAR ;
                         CAR ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         NIL operation ;
                         PAIR } }
                   { DIG 3 ;
                     DROP ;
                     IF_LEFT
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         ITER { DUP ;
                                DUG 2 ;
                                SENDER ;
                                SWAP ;
                                IF_LEFT {} {} ;
                                CAR ;
                                COMPARE ;
                                EQ ;
                                IF {} { PUSH string "FA2_NOT_OWNER" ; FAILWITH } ;
                                SWAP ;
                                IF_LEFT
                                  { SWAP ;
                                    UNIT ;
                                    SOME ;
                                    DUP 3 ;
                                    GET 4 ;
                                    DUP 4 ;
                                    GET 3 ;
                                    PAIR ;
                                    DIG 3 ;
                                    CAR ;
                                    PAIR ;
                                    UPDATE }
                                  { DUP ;
                                    DUG 2 ;
                                    GET 4 ;
                                    DUP 3 ;
                                    GET 3 ;
                                    PAIR ;
                                    DIG 2 ;
                                    CAR ;
                                    PAIR ;
                                    NONE unit ;
                                    SWAP ;
                                    UPDATE } } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP 3 ;
                         CAR ;
                         CDR ;
                         CDR ;
                         DUP 4 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CDR ;
                         DIG 3 ;
                         PAIR ;
                         PAIR ;
                         DIG 2 ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         NIL operation ;
                         PAIR }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CDR ;
                         SWAP ;
                         ITER { IF_LEFT
                                  { SWAP ; UNIT ; SENDER ; DIG 3 ; PAIR ; SWAP ; SOME ; SWAP ; UPDATE }
                                  { SWAP ; SENDER ; DIG 2 ; PAIR ; NONE unit ; SWAP ; UPDATE } } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP 3 ;
                         CAR ;
                         CDR ;
                         CDR ;
                         DIG 2 ;
                         DUP 4 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         DIG 2 ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         NIL operation ;
                         PAIR } } } }
           { DIG 2 ;
             SWAP ;
             IF_LEFT
               { DUP ;
                 CAR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CDR ;
                 DIG 2 ;
                 CDR ;
                 ITER { UNPAIR ;
                        DUP 3 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        DUP 6 ;
                        PAIR ;
                        GET ;
                        IF_NONE
                          { DROP 3 ; DUP 4 ; FAILWITH }
                          { DIG 2 ;
                            SWAP ;
                            SUB ;
                            ISNAT ;
                            IF_NONE
                              { DROP 2 ; DUP 4 ; FAILWITH }
                              { PUSH nat 0 ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                COMPARE ;
                                EQ ;
                                IF { DROP ; DUP 3 ; PAIR ; NONE nat ; SWAP ; UPDATE }
                                   { DIG 2 ; SWAP ; SOME ; DIG 2 ; DUP 4 ; PAIR ; UPDATE } } } } ;
                 SWAP ;
                 DIG 4 ;
                 DROP 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 DUP 4 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 DIG 3 ;
                 DIG 4 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 PAIR }
               { DIG 3 ;
                 DROP ;
                 DUP ;
                 CAR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CDR ;
                 COMPARE ;
                 EQ ;
                 IF { PUSH nat 0 ;
                      DUP 3 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CDR ;
                      PAIR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      GET 4 ;
                      ITER { SWAP ;
                             UNPAIR ;
                             DIG 2 ;
                             UNPAIR ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             DIG 4 ;
                             ADD ;
                             DUG 3 ;
                             DUP 5 ;
                             CAR ;
                             PAIR ;
                             SWAP ;
                             SOME ;
                             SWAP ;
                             UPDATE ;
                             PAIR } ;
                      UNPAIR ;
                      PUSH nat 1 ;
                      DUP 5 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CDR ;
                      ADD ;
                      DUP 5 ;
                      CDR ;
                      DUP 5 ;
                      GET 3 ;
                      DIG 4 ;
                      PAIR ;
                      DIG 4 ;
                      CAR ;
                      SWAP ;
                      SOME ;
                      SWAP ;
                      UPDATE ;
                      DIG 3 ;
                      CAR ;
                      PAIR ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CDR ;
                      DUP 3 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      DIG 5 ;
                      DIG 4 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CDR ;
                      DIG 3 ;
                      DUP 4 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CAR ;
                      PAIR ;
                      DIG 3 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      PAIR }
                    { DROP 2 ; PUSH string "INVALID_TOKEN_ID" ; FAILWITH } } ;
             NIL operation ;
             PAIR } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         SWAP ;
         DUP 3 ;
         CAR ;
         CAR ;
         CAR ;
         CAR ;
         CONTRACT %authorize
           (pair (address %sender)
                 (pair (list %sender_is_operator (list bool))
                       (pair (address %fa2_address)
                             (or %action
                                (or %assets_action
                                   (or (pair %balance_of
                                          (list %requests (pair (address %owner) (nat %token_id)))
                                          (contract %callback
                                             (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                                       (list %transfer
                                          (pair (address %from_)
                                                (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))))
                                   (or (list %update_operators
                                          (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                                              (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))))
                                       (list %update_operators_for_all
                                          (or (address %add_operator_for_all) (address %remove_operator_for_all)))))
                                (or (or %manage_action
                                       (pair %burn (nat %token_id) (list %owners (pair address nat)))
                                       (pair %mint
                                          (nat %token_id)
                                          (pair (map %token_info string bytes) (list %owners (pair address nat)))))
                                    (unit %admin_action)))))) ;
         IF_NONE { PUSH string "INVALID_AUTHORIZATION_CONTRACT" ; FAILWITH } {} ;
         DUP 5 ;
         IF_LEFT
           { IF_LEFT
               { DIG 4 ; DROP 2 ; NIL (list bool) }
               { IF_LEFT
                   { IF_LEFT
                       { DIG 4 ; DROP 2 ; NIL (list bool) }
                       { MAP { DUP ;
                               CDR ;
                               MAP { DUP 6 ;
                                     CAR ;
                                     CDR ;
                                     CAR ;
                                     CAR ;
                                     SWAP ;
                                     GET 3 ;
                                     SENDER ;
                                     PAIR ;
                                     DUP 3 ;
                                     CAR ;
                                     PAIR ;
                                     MEM } ;
                               SWAP ;
                               DROP } ;
                         DIG 4 ;
                         DROP } }
                   { DIG 4 ;
                     DROP ;
                     IF_LEFT { DROP ; NIL (list bool) } { DROP ; NIL (list bool) } } } }
           { IF_LEFT
               { NIL (list bool) ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 MAP { CAR ;
                       DUP 7 ;
                       CAR ;
                       CDR ;
                       CAR ;
                       CAR ;
                       DUP 4 ;
                       CAR ;
                       SENDER ;
                       PAIR ;
                       DIG 2 ;
                       PAIR ;
                       MEM } ;
                 DIG 2 ;
                 DIG 6 ;
                 DROP 2 ;
                 CONS }
               { DIG 4 ; DROP 2 ; NIL (list bool) } } ;
         SWAP ;
         PUSH mutez 0 ;
         SENDER ;
         DIG 3 ;
         SELF_ADDRESS ;
         DIG 7 ;
         IF_LEFT
           { IF_LEFT
               { DROP ;
                 UNIT ;
                 RIGHT
                   (or (pair nat (list (pair address nat)))
                       (pair nat (pair (map string bytes) (list (pair address nat))))) ;
                 RIGHT
                   (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))))
                           (list (pair address (list (pair address (pair nat nat))))))
                       (or (list (or (pair address (pair address nat)) (pair address (pair address nat))))
                           (list (or address address)))) }
               { LEFT (or (or (pair nat (list (pair address nat)))
                              (pair nat (pair (map string bytes) (list (pair address nat)))))
                          unit) } }
           { LEFT unit ;
             RIGHT
               (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))))
                       (list (pair address (list (pair address (pair nat nat))))))
                   (or (list (or (pair address (pair address nat)) (pair address (pair address nat))))
                       (list (or address address)))) } ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         TRANSFER_TOKENS ;
         CONS ;
         PAIR } }

