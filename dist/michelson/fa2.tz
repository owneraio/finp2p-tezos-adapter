{ parameter
    (or (or (or %admin
               (or (bool %pause) (address %update_auth_contract))
               (pair %update_token_metadata (nat %token_id) (map %metadata string bytes)))
            (or %assets
               (or (pair %balance_of
                      (list %requests (pair (address %owner) (nat %token_id)))
                      (contract %callback
                         (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                   (pair %hold
                      (pair %hold
                         (nat %token_id)
                         (pair (nat %amount) (pair (address %src) (option %dst address))))
                      (option %id nat)))
               (or (list %transfer
                      (pair (address %from_)
                            (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))
                   (list %update_operators
                      (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                          (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))))))
        (or %manager
           (or (pair %burn (nat %token_id) (list %owners (pair address nat)))
               (pair %execute
                  (nat %hold_id)
                  (pair (option %amount nat)
                        (pair (option %token_id nat) (pair (option %src address) (option %dst address))))))
           (or (pair %mint
                  (nat %token_id)
                  (pair (option %token_info (map string bytes)) (list %owners (pair address nat))))
               (pair %release
                  (nat %hold_id)
                  (pair (option %amount nat) (pair (option %token_id nat) (option %src address))))))) ;
  storage
    (pair (address %auth_contract)
          (pair (bool %paused)
                (pair (big_map %ledger (pair address nat) nat)
                      (pair (big_map %operators (pair address (pair address nat)) unit)
                            (pair (big_map %token_metadata nat (pair nat (map string bytes)))
                                  (pair (big_map %total_supply nat nat)
                                        (pair (nat %max_token_id)
                                              (pair (big_map %metadata string bytes)
                                                    (pair (nat %max_hold_id)
                                                          (pair (big_map %holds
                                                                   nat
                                                                   (pair (nat %token_id) (pair (nat %amount) (pair (address %src) (option %dst address)))))
                                                                (big_map %holds_totals (pair address nat) nat))))))))))) ;
  code { PUSH string "FA2_TOKEN_UNDEFINED" ;
         PUSH string "FA2_INSUFFICIENT_BALANCE" ;
         PUSH string "FA2_HOLD_ALREADY_EXISTS" ;
         DUP 3 ;
         DUP 3 ;
         PAIR ;
         LAMBDA
           (pair (pair string string)
                 (pair (list (pair address (list (pair address (pair nat nat)))))
                       (pair address
                             (pair bool
                                   (pair (big_map (pair address nat) nat)
                                         (pair (big_map (pair address (pair address nat)) unit)
                                               (pair (big_map nat (pair nat (map string bytes)))
                                                     (pair (big_map nat nat)
                                                           (pair nat
                                                                 (pair (big_map string bytes)
                                                                       (pair nat
                                                                             (pair (big_map nat (pair nat (pair nat (pair address (option address)))))
                                                                                   (big_map (pair address nat) nat)))))))))))))
           (big_map (pair address nat) nat)
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 5 ;
             SWAP ;
             ITER { DUP ;
                    DUG 2 ;
                    CDR ;
                    ITER { SWAP ;
                           DUP 4 ;
                           GET 9 ;
                           DUP 3 ;
                           GET 3 ;
                           MEM ;
                           NOT ;
                           IF { DUP 6 ; FAILWITH } {} ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           GET 4 ;
                           PUSH nat 0 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           COMPARE ;
                           EQ ;
                           IF { DIG 2 ; DROP 2 }
                              { SWAP ;
                                DUP ;
                                DUG 2 ;
                                DUP 4 ;
                                GET 3 ;
                                DUP 6 ;
                                CAR ;
                                PAIR ;
                                GET ;
                                IF_NONE { DUP 6 ; FAILWITH } {} ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                SWAP ;
                                SUB ;
                                ISNAT ;
                                IF_NONE { NONE nat } { SOME } ;
                                IF_NONE
                                  { DUP 6 ; FAILWITH }
                                  { DUP ;
                                    DUP 7 ;
                                    GET 20 ;
                                    DUP 6 ;
                                    GET 3 ;
                                    DUP 8 ;
                                    CAR ;
                                    PAIR ;
                                    GET ;
                                    IF_NONE { PUSH nat 0 } {} ;
                                    COMPARE ;
                                    GT ;
                                    IF { PUSH string "FA2_INSUFFICIENT_SPENDABLE_BALANCE" ; FAILWITH } {} ;
                                    PUSH nat 0 ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    COMPARE ;
                                    EQ ;
                                    IF { DROP ; NONE nat } { SOME } } ;
                                DIG 2 ;
                                SWAP ;
                                DUP 4 ;
                                GET 3 ;
                                DUP 6 ;
                                CAR ;
                                PAIR ;
                                UPDATE ;
                                DUP ;
                                DUP 4 ;
                                GET 3 ;
                                DUP 5 ;
                                CAR ;
                                PAIR ;
                                GET ;
                                IF_NONE { SWAP } { DIG 2 ; ADD } ;
                                DUP 3 ;
                                GET 3 ;
                                DIG 3 ;
                                CAR ;
                                PAIR ;
                                SWAP ;
                                SOME ;
                                SWAP ;
                                UPDATE } } ;
                    SWAP ;
                    DROP } ;
             SWAP ;
             DIG 2 ;
             DIG 3 ;
             DROP 3 } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair (pair nat (pair (option nat) (pair (option nat) (option address))))
                 (pair address
                       (pair bool
                             (pair (big_map (pair address nat) nat)
                                   (pair (big_map (pair address (pair address nat)) unit)
                                         (pair (big_map nat (pair nat (map string bytes)))
                                               (pair (big_map nat nat)
                                                     (pair nat
                                                           (pair (big_map string bytes)
                                                                 (pair nat
                                                                       (pair (big_map nat (pair nat (pair nat (pair address (option address)))))
                                                                             (big_map (pair address nat) nat))))))))))))
           (pair (pair address
                       (pair bool
                             (pair (big_map (pair address nat) nat)
                                   (pair (big_map (pair address (pair address nat)) unit)
                                         (pair (big_map nat (pair nat (map string bytes)))
                                               (pair (big_map nat nat)
                                                     (pair nat
                                                           (pair (big_map string bytes)
                                                                 (pair nat
                                                                       (pair (big_map nat (pair nat (pair nat (pair address (option address)))))
                                                                             (big_map (pair address nat) nat)))))))))))
                 (pair nat (pair nat (pair nat (pair address (option address))))))
           { UNPAIR ;
             UNPAIR 4 ;
             DUP 5 ;
             GET 19 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH string "FA2_UNKNOWN_HOLD_ID" ; FAILWITH } {} ;
             DIG 3 ;
             IF_NONE
               { UNIT }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 SWAP ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "UNEXPECTED_HOLD_TOKEN_ID" ; FAILWITH } { UNIT } } ;
             DROP ;
             DIG 3 ;
             IF_NONE
               { UNIT }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 5 ;
                 SWAP ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "UNEXPECTED_HOLD_SOURCE" ; FAILWITH } { UNIT } } ;
             DROP ;
             DIG 2 ;
             IF_NONE { DUP ; GET 3 } {} ;
             DUP ;
             DUP 3 ;
             GET 3 ;
             SUB ;
             ISNAT ;
             IF_NONE { NONE nat } { SOME } ;
             IF_NONE
               { PUSH string "FA2_INSUFFICIENT_HOLD" ; FAILWITH }
               { PUSH nat 0 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 EQ ;
                 IF { DROP ; NONE (pair nat (pair nat (pair address (option address)))) }
                    { DUP 3 ; SWAP ; UPDATE 3 ; SOME } } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             DUP 6 ;
             GET 20 ;
             DUP 5 ;
             CAR ;
             DUP 6 ;
             GET 5 ;
             PAIR ;
             GET ;
             IF_NONE { PUSH nat 0 } {} ;
             SUB ;
             ISNAT ;
             IF_NONE { NONE nat } { SOME } ;
             IF_NONE
               { NONE nat }
               { PUSH nat 0 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 EQ ;
                 IF { DROP ; NONE nat } { SOME } } ;
             DUP 4 ;
             DIG 3 ;
             PAIR ;
             DIG 5 ;
             DUP ;
             DUP ;
             DUG 7 ;
             GET 19 ;
             DIG 4 ;
             DIG 6 ;
             UPDATE ;
             UPDATE 19 ;
             DIG 4 ;
             GET 20 ;
             DIG 3 ;
             DUP 5 ;
             CAR ;
             DIG 5 ;
             GET 5 ;
             PAIR ;
             UPDATE ;
             UPDATE 20 ;
             PAIR } ;
         DIG 5 ;
         UNPAIR ;
         DUP ;
         IF_LEFT
           { DIG 3 ;
             DROP ;
             IF_LEFT
               { DIG 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 DROP 3 ;
                 DIG 2 ;
                 SWAP ;
                 IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     IF_LEFT
                       { UPDATE 3 }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         SWAP ;
                         UPDATE 1 ;
                         SWAP ;
                         GET 15 ;
                         PUSH bytes
                              0x7b226f70657261746f72223a226f776e65722d6f722d6f70657261746f72222c227265636569766572223a226f776e65722d6e6f2d686f6f6b222c2273656e646572223a226f776e65722d6e6f2d686f6f6b222c22637573746f6d223a7b22746167223a2266696e703270325f617574686f72697a6174696f6e222c22636f6e6669672d617069223a22227d7d ;
                         SOME ;
                         PUSH string "permissions" ;
                         UPDATE ;
                         UPDATE 15 } }
                   { UNPAIR ;
                     DUP 3 ;
                     GET 9 ;
                     DUG 2 ;
                     DUP ;
                     DUG 3 ;
                     PAIR ;
                     SOME ;
                     DIG 2 ;
                     GET_AND_UPDATE ;
                     IF_NONE { DROP 2 ; SWAP ; FAILWITH } { DIG 4 ; DROP 2 ; UPDATE 9 } } ;
                 NIL operation ;
                 PAIR }
               { DUP 3 ;
                 GET 3 ;
                 IF { PUSH string "PAUSED" ; FAILWITH } {} ;
                 DIG 2 ;
                 SWAP ;
                 IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     IF_LEFT
                       { DIG 3 ;
                         DIG 4 ;
                         DROP 2 ;
                         DUP ;
                         CAR ;
                         MAP { DUP 3 ;
                               GET 9 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               CDR ;
                               MEM ;
                               NOT ;
                               IF { DUP 5 ; FAILWITH } {} ;
                               DUP 3 ;
                               GET 5 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               CDR ;
                               DUP 3 ;
                               CAR ;
                               PAIR ;
                               GET ;
                               IF_NONE { PUSH nat 0 } {} ;
                               SWAP ;
                               PAIR } ;
                         DIG 4 ;
                         DROP ;
                         SWAP ;
                         CDR ;
                         PUSH mutez 0 ;
                         DIG 2 ;
                         TRANSFER_TOKENS ;
                         SWAP ;
                         NIL operation ;
                         DIG 2 ;
                         CONS ;
                         PAIR }
                       { DIG 5 ;
                         DROP ;
                         UNPAIR ;
                         SWAP ;
                         IF_NONE
                           { PUSH nat 1 ; DUP 3 ; GET 17 ; ADD }
                           { DUP 3 ;
                             GET 17 ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             COMPARE ;
                             LE ;
                             IF { DROP ; DUP 4 ; FAILWITH } {} } ;
                         DUP 3 ;
                         GET 19 ;
                         DUP 3 ;
                         SOME ;
                         DUP 3 ;
                         GET_AND_UPDATE ;
                         IF_NONE { DIG 5 ; DROP } { DROP ; DIG 5 ; FAILWITH } ;
                         DUP 4 ;
                         GET 20 ;
                         DUP 4 ;
                         CAR ;
                         DUP 5 ;
                         GET 5 ;
                         PAIR ;
                         GET ;
                         IF_NONE { DUP 3 ; GET 3 } { DUP 4 ; GET 3 ; ADD } ;
                         DUP 5 ;
                         GET 5 ;
                         DUP 5 ;
                         CAR ;
                         DUP 6 ;
                         GET 5 ;
                         PAIR ;
                         GET ;
                         IF_NONE { PUSH nat 0 } {} ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         GT ;
                         IF { DIG 6 ; FAILWITH } { DIG 6 ; DROP } ;
                         DUP 5 ;
                         DIG 2 ;
                         UPDATE 19 ;
                         DIG 4 ;
                         GET 20 ;
                         DIG 2 ;
                         DUP 5 ;
                         CAR ;
                         DIG 5 ;
                         GET 5 ;
                         PAIR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 20 ;
                         SWAP ;
                         UPDATE 17 ;
                         NIL operation ;
                         PAIR } }
                   { DIG 4 ;
                     DIG 5 ;
                     DIG 6 ;
                     DROP 3 ;
                     IF_LEFT
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         SWAP ;
                         PAIR ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         UPDATE 5 ;
                         NIL operation ;
                         PAIR }
                       { DIG 3 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 7 ;
                         SWAP ;
                         ITER { SWAP ;
                                SENDER ;
                                DUP 3 ;
                                IF_LEFT {} {} ;
                                CAR ;
                                COMPARE ;
                                EQ ;
                                IF {} { PUSH string "FA2_NOT_OWNER" ; FAILWITH } ;
                                SWAP ;
                                IF_LEFT
                                  { SWAP ;
                                    UNIT ;
                                    SOME ;
                                    DUP 3 ;
                                    GET 4 ;
                                    DUP 4 ;
                                    GET 3 ;
                                    PAIR ;
                                    DIG 3 ;
                                    CAR ;
                                    PAIR ;
                                    UPDATE }
                                  { DUP ;
                                    DUG 2 ;
                                    GET 4 ;
                                    DUP 3 ;
                                    GET 3 ;
                                    PAIR ;
                                    DIG 2 ;
                                    CAR ;
                                    PAIR ;
                                    NONE unit ;
                                    SWAP ;
                                    UPDATE } } ;
                         UPDATE 7 ;
                         NIL operation ;
                         PAIR } } } }
           { DIG 5 ;
             DROP ;
             DIG 2 ;
             SWAP ;
             IF_LEFT
               { IF_LEFT
                   { DIG 3 ;
                     DIG 4 ;
                     DROP 2 ;
                     DUP ;
                     CAR ;
                     DUP 3 ;
                     GET 9 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     NOT ;
                     IF { DIG 5 ; FAILWITH } { DIG 5 ; DROP } ;
                     PUSH nat 0 ;
                     DUP 4 ;
                     GET 5 ;
                     PAIR ;
                     DIG 2 ;
                     CDR ;
                     ITER { SWAP ;
                            UNPAIR ;
                            DIG 2 ;
                            UNPAIR ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            DUP 4 ;
                            DUP 7 ;
                            DUP 4 ;
                            PAIR ;
                            GET ;
                            IF_NONE { PUSH nat 0 } {} ;
                            SUB ;
                            ISNAT ;
                            IF_NONE { NONE nat } { SOME } ;
                            IF_NONE
                              { DROP 4 ; DUP 4 ; FAILWITH }
                              { DUP ;
                                DUP 8 ;
                                GET 20 ;
                                DUP 8 ;
                                DUP 5 ;
                                PAIR ;
                                GET ;
                                IF_NONE { PUSH nat 0 } {} ;
                                COMPARE ;
                                GT ;
                                IF { PUSH string "FA2_INSUFFICIENT_SPENDABLE_BALANCE" ; FAILWITH } {} ;
                                DIG 2 ;
                                DIG 4 ;
                                ADD ;
                                PUSH nat 0 ;
                                DUP 3 ;
                                COMPARE ;
                                EQ ;
                                IF { SWAP ; DROP ; DIG 2 ; DUP 4 ; DIG 3 ; PAIR ; NONE nat ; SWAP ; UPDATE }
                                   { DIG 3 ; DIG 2 ; DUP 5 ; DIG 4 ; PAIR ; SWAP ; SOME ; SWAP ; UPDATE } ;
                                PAIR } } ;
                     DIG 4 ;
                     DROP ;
                     UNPAIR ;
                     DUP 4 ;
                     GET 11 ;
                     DUP 4 ;
                     GET ;
                     IF_NONE
                       { SWAP ; DIG 2 ; DROP 2 ; SWAP ; DUP ; DUG 2 ; GET 11 }
                       { DIG 2 ;
                         SWAP ;
                         SUB ;
                         ISNAT ;
                         IF_NONE { NONE nat } { SOME } ;
                         IF_NONE
                           { NONE nat }
                           { PUSH nat 0 ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             COMPARE ;
                             EQ ;
                             IF { DROP ; NONE nat } { SOME } } ;
                         DUP 4 ;
                         GET 11 ;
                         SWAP ;
                         DIG 3 ;
                         UPDATE } ;
                     DUG 2 ;
                     UPDATE 5 ;
                     SWAP ;
                     UPDATE 11 }
                   { DIG 5 ;
                     DIG 6 ;
                     DROP 2 ;
                     UNPAIR 5 ;
                     DIG 5 ;
                     DUG 4 ;
                     PAIR 4 ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 6 ;
                     DIG 4 ;
                     IF_NONE
                       { IF_NONE { PUSH string "NO_DESTINATION_EXECUTE_HOLD" ; FAILWITH } {} }
                       { SWAP ;
                         IF_NONE
                           {}
                           { SWAP ;
                             DUP ;
                             DUG 2 ;
                             COMPARE ;
                             NEQ ;
                             IF { DROP ; PUSH string "UNEXPECTED_EXECUTE_HOLD_DESTINATION" ; FAILWITH }
                                {} } } ;
                     DUP 4 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     NIL (pair address (pair nat nat)) ;
                     DIG 4 ;
                     DUP 6 ;
                     CAR ;
                     DIG 5 ;
                     PAIR 3 ;
                     CONS ;
                     DIG 3 ;
                     GET 5 ;
                     PAIR ;
                     CONS ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     UPDATE 5 } }
               { DIG 4 ;
                 DIG 5 ;
                 DROP 2 ;
                 IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     IF_NONE
                       { DUP 3 ;
                         GET 9 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         MEM ;
                         NOT ;
                         IF { DIG 4 ; FAILWITH } { DIG 4 ; DROP } ;
                         DUP 3 ;
                         GET 9 }
                       { DIG 5 ;
                         DROP ;
                         DUP 4 ;
                         GET 9 ;
                         SWAP ;
                         DUP 3 ;
                         PAIR ;
                         SOME ;
                         DUP 3 ;
                         GET_AND_UPDATE ;
                         IF_NONE {} { DROP 2 ; PUSH string "FA2_TOKEN_ALREADY_EXISTS" ; FAILWITH } } ;
                     DUP 4 ;
                     GET 11 ;
                     DUP 3 ;
                     GET ;
                     IF_NONE { PUSH nat 0 } {} ;
                     DUP 5 ;
                     GET 5 ;
                     PAIR ;
                     DIG 3 ;
                     GET 4 ;
                     ITER { SWAP ;
                            UNPAIR ;
                            DIG 2 ;
                            UNPAIR ;
                            DUP 3 ;
                            DUP 7 ;
                            DUP 3 ;
                            PAIR ;
                            GET ;
                            IF_NONE { SWAP ; DUP ; DUG 2 } { DUP 3 ; ADD } ;
                            DIG 2 ;
                            DIG 4 ;
                            ADD ;
                            DIG 3 ;
                            DIG 2 ;
                            DUP 6 ;
                            DIG 4 ;
                            PAIR ;
                            SWAP ;
                            SOME ;
                            SWAP ;
                            UPDATE ;
                            PAIR } ;
                     UNPAIR ;
                     DUP 5 ;
                     DIG 3 ;
                     UPDATE 9 ;
                     DUP 5 ;
                     GET 11 ;
                     DIG 3 ;
                     DUP 5 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 11 ;
                     SWAP ;
                     UPDATE 5 ;
                     DUP 3 ;
                     GET 13 ;
                     DUP 3 ;
                     COMPARE ;
                     GT ;
                     IF { DIG 2 ; DROP ; SWAP } { SWAP ; DROP ; SWAP ; GET 13 } ;
                     UPDATE 13 }
                   { DIG 4 ; DROP ; PAIR ; DIG 2 ; SWAP ; EXEC ; CAR } } ;
             NIL operation ;
             PAIR } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         SWAP ;
         DUP 3 ;
         CAR ;
         CONTRACT %authorize
           (pair (address %sender)
                 (pair (list %sender_is_operator (list bool))
                       (pair (address %fa2_address)
                             (or %action
                                (or %assets_action
                                   (or (pair %balance_of
                                          (list %requests (pair (address %owner) (nat %token_id)))
                                          (contract %callback
                                             (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                                       (pair %hold
                                          (pair %hold
                                             (nat %token_id)
                                             (pair (nat %amount) (pair (address %src) (option %dst address))))
                                          (option %id nat)))
                                   (or (list %transfer
                                          (pair (address %from_)
                                                (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))
                                       (list %update_operators
                                          (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                                              (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))))))
                                (or (or %manage_action
                                       (or (pair %burn (nat %token_id) (list %owners (pair address nat)))
                                           (pair %execute
                                              (nat %hold_id)
                                              (pair (option %amount nat)
                                                    (pair (option %token_id nat) (pair (option %src address) (option %dst address))))))
                                       (or (pair %mint
                                              (nat %token_id)
                                              (pair (option %token_info (map string bytes)) (list %owners (pair address nat))))
                                           (pair %release
                                              (nat %hold_id)
                                              (pair (option %amount nat) (pair (option %token_id nat) (option %src address))))))
                                    (unit %admin_action)))))) ;
         IF_NONE { PUSH string "INVALID_AUTHORIZATION_CONTRACT" ; FAILWITH } {} ;
         DUP 5 ;
         IF_LEFT
           { IF_LEFT
               { DIG 4 ; DROP 2 ; NIL (list bool) }
               { IF_LEFT
                   { DIG 4 ;
                     DROP ;
                     IF_LEFT { DROP ; NIL (list bool) } { DROP ; NIL (list bool) } }
                   { IF_LEFT
                       { MAP { DUP ;
                               CDR ;
                               MAP { DUP 6 ; GET 7 ; SWAP ; GET 3 ; SENDER ; PAIR ; DUP 3 ; CAR ; PAIR ; MEM } ;
                               SWAP ;
                               DROP } ;
                         DIG 4 ;
                         DROP }
                       { DIG 4 ; DROP 2 ; NIL (list bool) } } } }
           { IF_LEFT
               { IF_LEFT
                   { NIL (list bool) ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     MAP { CAR ; DUP 7 ; GET 7 ; DUP 4 ; CAR ; SENDER ; PAIR ; DIG 2 ; PAIR ; MEM } ;
                     DIG 2 ;
                     DIG 6 ;
                     DROP 2 ;
                     CONS }
                   { DIG 4 ; DROP 2 ; NIL (list bool) } }
               { DIG 4 ;
                 DROP ;
                 IF_LEFT { DROP ; NIL (list bool) } { DROP ; NIL (list bool) } } } ;
         SWAP ;
         PUSH mutez 0 ;
         DIG 5 ;
         IF_LEFT
           { IF_LEFT
               { DROP ;
                 UNIT ;
                 RIGHT
                   (or (or (pair nat (list (pair address nat)))
                           (pair nat (pair (option nat) (pair (option nat) (pair (option address) (option address))))))
                       (or (pair nat (pair (option (map string bytes)) (list (pair address nat))))
                           (pair nat (pair (option nat) (pair (option nat) (option address)))))) ;
                 RIGHT
                   (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))))
                           (pair (pair nat (pair nat (pair address (option address)))) (option nat)))
                       (or (list (pair address (list (pair address (pair nat nat)))))
                           (list (or (pair address (pair address nat)) (pair address (pair address nat)))))) }
               { LEFT (or (or (or (pair nat (list (pair address nat)))
                                  (pair nat (pair (option nat) (pair (option nat) (pair (option address) (option address))))))
                              (or (pair nat (pair (option (map string bytes)) (list (pair address nat))))
                                  (pair nat (pair (option nat) (pair (option nat) (option address))))))
                          unit) } }
           { LEFT unit ;
             RIGHT
               (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))))
                       (pair (pair nat (pair nat (pair address (option address)))) (option nat)))
                   (or (list (pair address (list (pair address (pair nat nat)))))
                       (list (or (pair address (pair address nat)) (pair address (pair address nat)))))) } ;
         SELF_ADDRESS ;
         DIG 4 ;
         SENDER ;
         PAIR 4 ;
         TRANSFER_TOKENS ;
         CONS ;
         PAIR } ;
  view "get_hold"
       nat
       (option
          (pair (nat %token_id) (pair (nat %amount) (pair (address %src) (option %dst address)))))
       { UNPAIR ; SWAP ; GET 19 ; SWAP ; GET } ;
  view "get_max_hold_id" unit nat { CDR ; GET 17 } ;
  view "get_max_token_id" unit nat { CDR ; GET 13 } ;
  view "get_spendable_balance"
       (pair address nat)
       nat
       { UNPAIR ;
         UNPAIR ;
         DUP 3 ;
         GET 9 ;
         DUP 3 ;
         MEM ;
         NOT ;
         IF { DROP 3 ; PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH }
            { DUP 3 ;
              GET 20 ;
              DUP 3 ;
              DUP 3 ;
              PAIR ;
              GET ;
              IF_NONE { PUSH nat 0 } {} ;
              DIG 3 ;
              GET 5 ;
              DIG 3 ;
              DIG 3 ;
              PAIR ;
              GET ;
              IF_NONE { PUSH nat 0 } {} ;
              SUB ;
              ISNAT ;
              IF_NONE { NONE nat } { SOME } ;
              IF_NONE { PUSH nat 0 } {} } } ;
  view "get_balance_info"
       (pair address nat)
       (pair (nat %balance) (nat %on_hold))
       { UNPAIR ;
         UNPAIR ;
         DUP 3 ;
         GET 9 ;
         DUP 3 ;
         MEM ;
         NOT ;
         IF { DROP 3 ; PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH }
            { DUP 3 ;
              GET 20 ;
              DUP 3 ;
              DUP 3 ;
              PAIR ;
              GET ;
              IF_NONE { PUSH nat 0 } {} ;
              DIG 3 ;
              GET 5 ;
              DIG 3 ;
              DIG 3 ;
              PAIR ;
              GET ;
              IF_NONE { PUSH nat 0 } {} ;
              PAIR } } ;
  view "get_balance"
       (pair address nat)
       nat
       { UNPAIR ;
         UNPAIR ;
         DUP 3 ;
         GET 9 ;
         DUP 3 ;
         MEM ;
         NOT ;
         IF { DROP 3 ; PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH }
            { DIG 2 ; GET 5 ; DUG 2 ; PAIR ; GET ; IF_NONE { PUSH nat 0 } {} } } }

